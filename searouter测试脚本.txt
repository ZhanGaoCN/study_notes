剩余两台环境为：
searouter环境1：
minicom连接至：192.168.200.163
tftp连接至：192.168.9.205的em3口（server ip：192.168.3.254）
searouter 25 26口（0xc/0xd口）连接至200.163的p3p1 p3p2口

searouter环境2：
minicom连接至：192.168.101.196
tftp连接至：192.168.101.196的em4口（server ip：192.168.2.254）
searouter 25 26口（port 0xc/0xd）连接至101.196的p3p3 p3p4口
searouter 27 28口（port 0xe/0xf）连接至思博伦1、2口

tftp拷贝文件
200.163：
minicom：tftp -gl fpga.bit 192.168.3.254  (ip可通过在本机ifconfig配置接口观察得到，fpga.bit在9.205 :src/tftp目录下
192.168.3.254
101.196：
minicom：tftp -gl fpga.bit 192.168.2.254  (ip可通过在本机ifconfig配置接口观察得到，fpga.bit在101.196 :src/tftp目录下

9.205：
minicom：tftp -gl fpga.bit 192.168.2.254  (ip可通过在本机ifconfig配置接口观察得到，fpga.bit在9.205 :src/tftp目录下

tar -xvf xxx.tar

telnet 127.0.0.1 8086

interface 0 qos cir 33333
display qos cir interface 0

interface 1 qos cir 33333
display qos cir interface 1

interface 1 queue 5 weight 10 low-limit 80 high-limit 100 buffer 123
interface 1 queue 0 weight 6 low-limit 23 high-limit 45 buffer 24
interface 0 queue 2 weight 8 low-limit 12 high-limit 36 buffer 46
interface 0 queue 3 weight 7 low-limit 45 high-limit 86 buffer 64

display queue profile interface 1
display queue profile interface 0


200.163 Telnet
Minicom:telnetd -b 192.168.3.204 -p 1234
然后在200.163上：telnet 192.168.3.204 1234


101.196 Telnet
Minicom:telnetd -b 192.168.2.204 -p 1234
然后在101.196上：telnet 192.168.2.204 1234

9.205 Telnet
Minicom:telnetd -b 192.168.2.204 -p 1234
然后在9.205上：telnet 192.168.2.204 1234



telnet 127.0.0.1 8086

烧写
./mqnic-fw -d /dev/mqnic0 -s 1 -w xxx.bit

重启板卡
#配置IO复用为GPIO（SysGpioMultiCtl）
devmem 0x332001a0 32 0xAAAA0600
#GPIO输出使能（GpioOutCtl）
devmem 0x33610004 16 0x000f
#GPIO输出0x0000（GpioDataCtl）
devmem 0x33610000 16 0x0000
#GPIO输出0x000f（GpioDataCtl）
devmem 0x33610000 16 0x000f
Reboot

set_iface脚本
Show port mac-link

cd /mnt/flash/user/
rmmod mqnic.ko
insmod mqnic.ko iface=0x3 ctl_enable=1

sleep 3s

echo "version"
./mqnic-fw -d /dev/mqnic0
echo "up iface"

sleep 2s

ifconfig enp1s0 up
ifconfig enp1s0d1 up
ifconfig enp1s0d3 up
ifconfig enp1s0d3 down
ifconfig enp1s0d3 hw ether 00:DE:AD:00:00:FE
ifconfig enp1s0d3 up

sleep 1s

ifconfig enp1s0d3 down
ifconfig enp1s0d3 hw ether 00:DE:AD:00:00:FE
ifconfig enp1s0d3 up
sleep 2s

ifconfig enp1s0d1 mtu 8192
ifconfig enp1s0 mtu 8192


echo "pkill nginx"
pkill -9 nginx

sleep 1s
echo "start agent"

./agent/sbin/nginx &

（cd /mnt/flash/user/r1000/agent/sbin/
./nginx &）

sleep 1s

./controller_simulator/sbin/nginx &

（cd /mnt/flash/user/r1000/controller_simulator/sbin/
./nginx &）

sleep 2s

echo "devmem"
devmem 0x41000028
devmem 0x4100002c

sdk配置，配vlan
insmod dal.ko

进入sdk配置界面（每次配置只在sdk界面生效）
./ctcsdk cli

port all mac enable
port all port-en enable
show port mac-link
show stats mac-all all

端口可通过show port mac-link观察得到
0-c 0-e
0-d 0-f   四个口分别为左上c，左下d，右上e，右下f，3c，3d不变

vlan create vlan 10 default-entry
port 0x000c default vlan 10
vlan add port 0x000c vlan 10
port 0x000c vlan-ctl drop-all-tagged
port 0x000c vlan-filtering direction both enable

port 0x003c default vlan 10
vlan add port 0x003c vlan 10
port 0x003c vlan-ctl drop-all-tagged
port 0x003c vlan-filtering direction both enable

vlan create vlan 20 default-entry
port 0x000d default vlan 20
vlan add port 0x000d vlan 20
port 0x000d vlan-ctl drop-all-tagged
port 0x000d vlan-filtering direction both enable

port 0x003d default vlan 20
vlan add port 0x003d vlan 20
port 0x003d vlan-ctl drop-all-tagged
port 0x003d vlan-filtering direction both enable


devmem 0x41000000 （12341234）

devmem 0x40000040 32 0xFEE1DEAD （重启程序，暂时不用）
reboot

tftp -p -r test.pcap  192.168.2.254

scheduler：
写入次数： devmem 0x41920078
配置限速次数：devmem 0x41920054

mq：
写入次数：devmem 0x41900704

axil：
写入addr次数： devmem 0x41000708
写入data次数： devmem 0x41000700

1. scheduler wr_addr
devmem 0x41920280
devmem 0x41920284
devmem 0x41920288
devmem 0x4192028c
devmem 0x41920290
devmem 0x41920294
devmem 0x41920298
devmem 0x4192029c
devmem 0x419202a0
devmem 0x419202a4
devmem 0x419202a8
devmem 0x419202ac
devmem 0x419202b0
devmem 0x419202b4
devmem 0x419202b8
devmem 0x419202bc

2. scheduler  wr_data
devmem 0x41920080
devmem 0x41920084
devmem 0x41920088
devmem 0x4192008c
devmem 0x41920090
devmem 0x41920094
devmem 0x41920098
devmem 0x4192009c
devmem 0x419200a0
devmem 0x419200a4
devmem 0x419200a8
devmem 0x419200ac
devmem 0x419200b0
devmem 0x419200b4
devmem 0x419200b8
devmem 0x419200bc


3. mq_top  wr_addr
devmem 0x41900a80
devmem 0x41900a84
devmem 0x41900a88
devmem 0x41900a8c
devmem 0x41900a90
devmem 0x41900a94
devmem 0x41900a98
devmem 0x41900a9c
devmem 0x41900aa0
devmem 0x41900aa4
devmem 0x41900aa8
devmem 0x41900aac
devmem 0x41900ab0
devmem 0x41900ab4
devmem 0x41900ab8
devmem 0x41900abc

4.  mq_top  wr_data
devmem 0x41900880
devmem 0x41900884
devmem 0x41900888
devmem 0x4190088c
devmem 0x41900890
devmem 0x41900894
devmem 0x41900898
devmem 0x4190089c
devmem 0x419008a0
devmem 0x419008a4
devmem 0x419008a8
devmem 0x419008ac
devmem 0x419008b0
devmem 0x419008b4
devmem 0x419008b8
devmem 0x419008bc

5. axil wr_addr
devmem 0x41000400
devmem 0x41000404
devmem 0x41000408
devmem 0x4100040C
devmem 0x41000410
devmem 0x41000414
devmem 0x41000418
devmem 0x4100041C
devmem 0x41000420
devmem 0x41000424
devmem 0x41000428
devmem 0x4100042C
devmem 0x41000430
devmem 0x41000434
devmem 0x41000438
devmem 0x4100043C


6. axil wr_data
devmem 0x41000300
devmem 0x41000304
devmem 0x41000308
devmem 0x4100030C
devmem 0x41000310
devmem 0x41000314
devmem 0x41000318
devmem 0x4100031C
devmem 0x41000320
devmem 0x41000324
devmem 0x41000328
devmem 0x4100032C
devmem 0x41000330
devmem 0x41000334
devmem 0x41000338
devmem 0x4100033C

qem:
devmem 0x41912000
devmem 0x41912004
devmem 0x41912008
devmem 0x4191200c
devmem 0x41912010
devmem 0x41912014
devmem 0x4191201c

devmem 0x41912018



